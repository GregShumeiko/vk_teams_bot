from flask import Flask, jsonify
import threading
import httpx
from datetime import datetime, timedelta
import logging
import os
import time
import schedule
import calendar
from typing import Optional, Dict, List
from functools import lru_cache

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('currency_service.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
BASE_CBR_URL = "https://www.cbr-xml-daily.ru"
DAILY_URL = f"{BASE_CBR_URL}/daily_json.js"
ARCHIVE_URL = f"{BASE_CBR_URL}/archive/{{year}}/{{month:02d}}/{{day:02d}}/daily_json.js"
MIN_YEAR = 2025

class CurrencyService:
    def __init__(self):
        self.last_rate: Optional[float] = None
        self.last_successful_send: Optional[datetime] = None
        self.start_time = datetime.now()
        self.http_client = httpx.Client(timeout=30.0)
        self.rate_cache: Dict[datetime.date, float] = {}
        self.last_known_rate: Optional[float] = None
        self.last_monthly_report: Optional[datetime] = None

    def __del__(self):
        self.http_client.close()

    @lru_cache(maxsize=365)
    def get_rate(self, date: datetime) -> Optional[float]:
        try:
            if date.date() in self.rate_cache:
                return self.rate_cache[date.date()]
            if date.date() == datetime.now().date():
                response = self.http_client.get(DAILY_URL)
            else:
                if date.year < MIN_YEAR:
                    return None
                url = ARCHIVE_URL.format(year=date.year, month=date.month, day=date.day)
                response = self.http_client.get(url)

            if response.status_code == 200:
                rate = round(response.json()["Valute"]["USD"]["Value"], 4)
                self.rate_cache[date.date()] = rate
                self.last_known_rate = rate
                return rate
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}")
            return None

    def get_previous_workday_rate(self, date: datetime) -> Optional[float]:
        for delta in range(1, 8):
            prev_date = date - timedelta(days=delta)
            rate = self.get_rate(prev_date)
            if rate is not None:
                return rate
        return None

    def get_last_available_rate(self, date: datetime) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å —É—á–µ—Ç–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¶–ë"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—É –¥–∞—Ç—É
        rate = self.get_rate(date)
        if rate is not None:
            return rate
        
        # –î–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–±–±–æ—Ç—É (–¶–ë –ø—É–±–ª–∏–∫—É–µ—Ç –∫—É—Ä—Å –Ω–∞ —Å—É–±–±–æ—Ç—É)
        if date.weekday() == 6:  # 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            saturday = date - timedelta(days=1)
            saturday_rate = self.get_rate(saturday)
            if saturday_rate is not None:
                return saturday_rate
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–Ω–∏ (–º–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        for delta in range(1, 8):
            prev_date = date - timedelta(days=delta)
            rate = self.get_rate(prev_date)
            if rate is not None:
                return rate
        return None

    def send_to_chat(self, text: str) -> bool:
        try:
            response = self.http_client.get(
                "https://api.internal.myteam.mail.ru/bot/v1/messages/sendText",
                params={"token": TOKEN, "chatId": CHAT_ID, "text": text}
            )
            if response.status_code == 200:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç")
                return True
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def format_change(self, change: Optional[float]) -> str:
        if change is None:
            return "üîÑ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if change > 0:
            return f"üìà +{change:.4f}"
        elif change < 0:
            return f"üìâ {change:.4f}"
        return "‚ùé –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"

    def format_change_percent(self, change: Optional[float], prev_rate: Optional[float]) -> str:
        if change is None or prev_rate is None or prev_rate == 0:
            return ""
        percent = (change / prev_rate) * 100
        return f"({percent:+.2f}%)"

    def calculate_monthly_stats(self, year: int, month: int) -> Optional[Dict]:
        if year < MIN_YEAR:
            return None

        last_day = calendar.monthrange(year, month)[1]
        all_rates: List[float] = []
        workday_rates: List[float] = []
        last_valid_rate = None

        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if month > 1:
            prev_month = month - 1
            prev_year = year
        else:
            prev_month = 12
            prev_year = year - 1

        prev_month_last_day = calendar.monthrange(prev_year, prev_month)[1]
        last_valid_rate = self.get_rate(datetime(prev_year, prev_month, prev_month_last_day))

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∑–∞ –º–µ—Å—è—Ü
        for day in range(1, last_day + 1):
            date = datetime(year, month, day)
            rate = self.get_rate(date)

            if rate is not None:
                last_valid_rate = rate
                workday_rates.append(rate)
                all_rates.append(rate)
            elif last_valid_rate is not None:
                all_rates.append(last_valid_rate)

        if not all_rates:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å –º–µ—Å—è—Ü–∞
        last_available_rate = self.get_last_available_rate(datetime(year, month, last_day))
        if last_available_rate is None:
            last_available_rate = all_rates[-1]

        avg_all_days = round(sum(all_rates) / len(all_rates), 4)
        avg_workdays = round(sum(workday_rates) / len(workday_rates), 4) if workday_rates else None

        return {
            "last_rate": last_available_rate,
            "avg_rate": avg_all_days,
            "avg_workdays_rate": avg_workdays,
            "min_rate": min(all_rates),
            "max_rate": max(all_rates),
            "range": round(max(all_rates) - min(all_rates), 4),
            "days_count": len(all_rates),
            "workdays_count": len(workday_rates),
            "trend": self.calculate_trend(all_rates),
            "last_available_date": self.get_last_available_date(year, month)
        }

    def get_last_available_date(self, year: int, month: int) -> datetime:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –≤ –º–µ—Å—è—Ü–µ —Å —É—á–µ—Ç–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¶–ë"""
        last_day = calendar.monthrange(year, month)[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        last_date = datetime(year, month, last_day)
        if self.get_rate(last_date) is not None:
            return last_date
        
        # –î–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–±–±–æ—Ç—É
        if last_date.weekday() == 6:  # 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            saturday = last_date - timedelta(days=1)
            if self.get_rate(saturday) is not None:
                return saturday
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Å –∫—É—Ä—Å–æ–º
        for day in range(last_day - 1, 0, -1):
            date = datetime(year, month, day)
            if self.get_rate(date) is not None:
                return date
        
        return datetime(year, month, last_day)

    def calculate_trend(self, rates: list) -> str:
        if not rates:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if rates[-1] > rates[0]:
            return "üìà –†–æ—Å—Ç"
        elif rates[-1] < rates[0]:
            return "üìâ –ü–∞–¥–µ–Ω–∏–µ"
        return "‚è∏Ô∏è –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"

    def retry_failed_message(self):
        try:
            if os.path.exists("last_failed_message.txt"):
                with open("last_failed_message.txt", "r", encoding="utf-8") as f:
                    message = f.read()
                success = self.send_to_chat(message)
                if success:
                    logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
                    os.remove("last_failed_message.txt")
                    return True
                else:
                    logger.error("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def is_last_day_of_month(self, date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º –º–µ—Å—è—Ü–∞"""
        last_day = calendar.monthrange(date.year, date.month)[1]
        return date.day == last_day

    def send_monthly_reports(self, year: int, month: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã"""
        stats = self.calculate_monthly_stats(year, month)
        if not stats:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ {month}/{year}")
            return False

        try:
            month_name = datetime(year, month, 1).strftime('%B %Y')
            last_date_str = stats["last_available_date"].strftime('%d.%m.%Y')
            
            # –û—Ç—á–µ—Ç –¥–ª—è Bidease
            bidease_msg = (
                f"üîÆ –ö—É—Ä—Å Bidease –Ω–∞ {month_name}:\n"
                f"üîπ {round(stats['last_rate'] * 1.06, 4):.4f} ‚ÇΩ\n"
                f"üî∏ –ù–∞ –æ—Å–Ω–æ–≤–µ: {stats['last_rate']:.4f} ‚ÇΩ (–∫—É—Ä—Å –¶–ë –Ω–∞ {last_date_str}) √ó 1.06"
            )
            self.send_to_chat(bidease_msg)

            # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å
            avg_msg = (
                f"üì¢ –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å –∑–∞ {month_name}:\n"
                f"üîπ {stats['avg_rate']:.4f} ‚ÇΩ\n"
                f"üî∏ –î–Ω–µ–π –≤ —Ä–∞—Å—á–µ—Ç–µ: {stats['days_count']}\n"
                f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å –º–µ—Å—è—Ü–∞: {stats['last_rate']:.4f} ‚ÇΩ (–∫—É—Ä—Å –¶–ë –Ω–∞ {last_date_str})"
            )
            self.send_to_chat(avg_msg)

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            analytics_msg = (
                f"üìÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ {month_name}:\n"
                f"üîª –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: {stats['min_rate']:.4f} ‚ÇΩ\n"
                f"üî∫ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å: {stats['max_rate']:.4f} ‚ÇΩ\n"
                f"‚ñ™Ô∏è –†–∞–∑–º–∞—Ö –∫—É—Ä—Å–∞: {stats['range']:.4f} ‚ÇΩ\n"
                f"üìä –¢—Ä–µ–Ω–¥: {stats['trend']}\n"
            )
            self.send_to_chat(analytics_msg)

            self.last_monthly_report = datetime.now()
            logger.info(f"–ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ {month_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {str(e)}")
            return False

    def send_daily_report(self) -> bool:
        try:
            today = datetime.now()
            current_rate = self.get_rate(today)
            prev_rate = self.get_previous_workday_rate(today)

            # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å
            if self.is_last_day_of_month(today) and current_rate is None:
                current_rate = self.get_last_available_rate(today)
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞: {current_rate}")

            if current_rate is None or prev_rate is None:
                logger.warning("–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                with open("last_failed_message.txt", "w", encoding="utf-8") as f:
                    f.write("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ USD –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
                return False

            if current_rate == prev_rate and not self.is_last_day_of_month(today):
                logger.info("–ö—É—Ä—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
                return False

            change = current_rate - prev_rate
            change_percent = self.format_change_percent(change, prev_rate)
            date_str = today.strftime("%d.%m.%Y")
            jump_comment = "\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ–ª—å—à–æ–π —Å–∫–∞—á–æ–∫ –∫—É—Ä—Å–∞!" if abs(change) >= 1.0 else ""

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
            if self.is_last_day_of_month(today):
                last_available_date = self.get_last_available_date(today.year, today.month)
                if last_available_date != today:
                    date_info = f" (–∫—É—Ä—Å –¶–ë –Ω–∞ {last_available_date.strftime('%d.%m.%Y')})"
                else:
                    date_info = ""
                
                message = (
                    f"üìÖ –ö–£–†–° –ù–ê –ö–û–ù–ï–¶ –ú–ï–°–Ø–¶–ê - {date_str}{date_info}:\n"
                    f"üîπ {current_rate:.4f} ‚ÇΩ\n"
                    f"üî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {self.format_change(change)} {change_percent}"
                    f"{jump_comment}"
                )
            else:
                message = (
                    f"üíµ –ö—É—Ä—Å USD –Ω–∞ {date_str}:\n"
                    f"üîπ {current_rate:.4f} ‚ÇΩ\n"
                    f"üî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {self.format_change(change)} {change_percent}"
                    f"{jump_comment}"
                )

            success = self.send_to_chat(message)
            if not success:
                logger.error("–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                self.send_to_chat("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ –∫—É—Ä—Å–µ USD. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—É–¥–µ—Ç –≤ 10:00 –ú–°–ö.")
                with open("last_failed_message.txt", "w", encoding="utf-8") as f:
                    f.write(message)
                return False

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            if self.is_last_day_of_month(today):
                logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ {today.month}/{today.year}")
                self.send_monthly_reports(today.year, today.month)

            self.last_successful_send = datetime.now()
            self.last_rate = current_rate
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            return False

currency_service = CurrencyService()

def run_scheduler():
    schedule.every().day.at("08:00").do(currency_service.send_daily_report)  # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
    schedule.every().day.at("10:00").do(currency_service.retry_failed_message)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    schedule.every(55).minutes.do(lambda: logger.info("Self-ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"))
    
    while True:
        schedule.run_pending()
        time.sleep(60)

@app.route('/')
def home():
    return """
    <h1>–°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–∞ USD</h1>
    <p>–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 –ú–°–ö.</p>
    <p>–í –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.</p>
    <p><a href="/health">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</a></p>
    <p><a href="/ping">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</a></p>
    """

@app.route('/health')
def health_check():
    return jsonify({
        "status": "running",
        "start_time": currency_service.start_time.isoformat(),
        "last_successful_send": currency_service.last_successful_send.isoformat() if currency_service.last_successful_send else None,
        "last_monthly_report": currency_service.last_monthly_report.isoformat() if currency_service.last_monthly_report else None,
        "last_rate": currency_service.last_rate,
        "next_run": str(schedule.next_run()),
        "min_year": MIN_YEAR,
        "cache_size": len(currency_service.rate_cache)
    })

@app.route('/ping')
def ping():
    logger.info("Received ping request")
    return jsonify({
        "status": "alive",
        "time": datetime.now().isoformat(),
        "last_report": currency_service.last_successful_send.isoformat() if currency_service.last_successful_send else None
    })

threading.Thread(target=run_scheduler, daemon=True).start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
