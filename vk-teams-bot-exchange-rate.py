from flask import Flask, jsonify
import threading
import httpx
from datetime import datetime, timedelta
import logging
import os
import time
import schedule
import socket
import calendar
from typing import Optional, Dict, Tuple, Any
from functools import lru_cache

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('currency_service.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
BASE_CBR_URL = "https://www.cbr-xml-daily.ru"
DAILY_URL = f"{BASE_CBR_URL}/daily_json.js"
ARCHIVE_URL = f"{BASE_CBR_URL}/archive/{{year}}/{{month:02d}}/{{day:02d}}/daily_json.js"
MIN_YEAR = 2025

class CurrencyService:
    def __init__(self):
        self.last_rate: Optional[float] = None
        self.last_successful_send: Optional[datetime] = None
        self.start_time = datetime.now()
        self.http_client = httpx.Client(timeout=30.0)
        self.rate_cache: Dict[datetime.date, float] = {}

    def __del__(self):
        self.http_client.close()

    @lru_cache(maxsize=365)
    def get_rate(self, date: datetime) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if date.date() in self.rate_cache:
                return self.rate_cache[date.date()]
                
            if date.date() == datetime.now().date():
                response = self.http_client.get(DAILY_URL)
            else:
                if date.year < MIN_YEAR:
                    return None
                
                url = ARCHIVE_URL.format(
                    year=date.year,
                    month=date.month,
                    day=date.day
                )
                response = self.http_client.get(url)
            
            if response.status_code == 200:
                rate = round(response.json()["Valute"]["USD"]["Value"], 4)
                self.rate_cache[date.date()] = rate
                return rate
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {str(e)}")
            return None

    def get_previous_workday_rate(self, date: datetime) -> Optional[float]:
        """–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
        for delta in range(1, 8):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            prev_date = date - timedelta(days=delta)
            if prev_date.weekday() >= 5:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
            if prev_date.date() in self.rate_cache:
                return self.rate_cache[prev_date.date()]
                
            rate = self.get_rate(prev_date)
            if rate is not None:
                return rate
        return None

    def get_rate_with_change(self, date: datetime) -> Tuple[Optional[float], Optional[float]]:
        """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        current_rate = self.get_rate(date)
        if current_rate is None:
            return None, None
            
        prev_rate = self.get_previous_workday_rate(date)
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç: —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –º–∏–Ω—É—Å –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        change = (current_rate - prev_rate) if prev_rate is not None else None
        
        return current_rate, change

    def calculate_monthly_stats(self, year: int, month: int) -> Optional[Dict]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –º–µ—Å—è—Ü"""
        if year < MIN_YEAR:
            logger.warning(f"–ó–∞–ø—Ä–æ—à–µ–Ω –≥–æ–¥ {year} (–º–∏–Ω–∏–º—É–º {MIN_YEAR})")
            return None
            
        last_day = calendar.monthrange(year, month)[1]
        rates = []
        current_rate = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã –∑–∞ –º–µ—Å—è—Ü
        for day in range(1, last_day + 1):
            date = datetime(year, month, day)
            rate = self.get_rate(date)
            if rate is not None:
                rates.append(rate)
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
        if not rates:
            return None
            
        last_rate = rates[-1]
        avg_rate = round(sum(rates) / len(rates), 4)
        
        return {
            "last_rate": last_rate,
            "avg_rate": avg_rate,
            "days_count": len(rates)
        }

    def send_to_chat(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            response = self.http_client.get(
                "https://api.internal.myteam.mail.ru/bot/v1/messages/sendText",
                params={"token": TOKEN, "chatId": CHAT_ID, "text": text}
            )
            if response.status_code == 200:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def format_change(self, change: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —Å —ç–º–æ–¥–∑–∏"""
        if change is None:
            return "üîÑ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        if change > 0:
            return f"üìà +{change:.4f}"  # –ö—É—Ä—Å –≤—ã—Ä–æ—Å
        elif change < 0:
            return f"üìâ {change:.4f}"   # –ö—É—Ä—Å —É–ø–∞–ª (–∑–Ω–∞–∫ —É–∂–µ –≤ —á–∏—Å–ª–µ)
        return "‚û°Ô∏è 0.0000"

    def send_daily_report(self) -> bool:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            current_rate, change = self.get_rate_with_change(datetime.now())
            if current_rate is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å")
            
            current_date = datetime.now()
            date_str = current_date.strftime("%d.%m.%Y")

            # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            change_str = self.format_change(change)
            message = (
                f"üíµ –ö—É—Ä—Å USD –Ω–∞ {date_str}:\n"
                f"üîπ {current_rate:.4f} ‚ÇΩ\n"
                f"üî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_str}"
            )
            
            if not self.send_to_chat(message):
                return False

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            if current_date.day == calendar.monthrange(current_date.year, current_date.month)[1]:
                logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –º–µ—Å—è—Ü")
                
                # –ö—É—Ä—Å Bidease
                next_month = (current_date + timedelta(days=32)).replace(day=1)
                bidease_msg = (
                    f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ Bidease –Ω–∞ {next_month.strftime('%B %Y')}:\n"
                    f"üîπ {round(current_rate * 1.06, 4):.4f} ‚ÇΩ\n"
                    f"üî∏ –ù–∞ –æ—Å–Ω–æ–≤–µ: {current_rate:.4f} ‚ÇΩ √ó 1.06"
                )
                self.send_to_chat(bidease_msg)

                # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å
                stats = self.calculate_monthly_stats(current_date.year, current_date.month)
                if stats:
                    avg_msg = (
                        f"üìä –°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å –∑–∞ {current_date.strftime('%B %Y')}:\n"
                        f"üîπ {stats['avg_rate']:.4f} ‚ÇΩ\n"
                        f"üî∏ –î–Ω–µ–π –≤ —Ä–∞—Å—á–µ—Ç–µ: {stats['days_count']}\n"
                        f"üîπ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å: {stats['last_rate']:.4f} ‚ÇΩ"
                    )
                    self.send_to_chat(avg_msg)

            self.last_successful_send = datetime.now()
            self.last_rate = current_rate
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
currency_service = CurrencyService()

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    schedule.every().day.at("05:00").do(currency_service.send_daily_report)  # 05:00 UTC = 08:00 –ú–°–ö
    currency_service.send_daily_report()  # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    while True:
        schedule.run_pending()
        time.sleep(60)

@app.route('/')
def home():
    return """
    <h1>–°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–∞ USD</h1>
    <p>–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Ç—á–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 –ú–°–ö.</p>
    <p>–í –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤–∫–ª—é—á–∞—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.</p>
    <p><a href="/health">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</a></p>
    """

@app.route('/health')
def health_check():
    return jsonify({
        "status": "running",
        "start_time": currency_service.start_time.isoformat(),
        "last_successful_send": currency_service.last_successful_send.isoformat() if currency_service.last_successful_send else None,
        "last_rate": currency_service.last_rate,
        "is_last_day_of_month": calendar.monthrange(datetime.now().year, datetime.now().month)[1] == datetime.now().day,
        "next_run": str(schedule.next_run()),
        "min_year": MIN_YEAR,
        "cache_size": len(currency_service.rate_cache)
    })

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
threading.Thread(target=run_scheduler, daemon=True).start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
