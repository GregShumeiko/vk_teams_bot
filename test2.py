from flask import Flask, jsonify
import threading
import httpx
from datetime import datetime, timedelta
import logging
import os
import time
import schedule
import calendar
from functools import lru_cache

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('currency_service.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
BASE_CBR_URL = "https://www.cbr-xml-daily.ru"
DAILY_URL = f"{BASE_CBR_URL}/daily_json.js"
ARCHIVE_URL = f"{BASE_CBR_URL}/archive/{{year}}/{{month:02d}}/{{day:02d}}/daily_json.js"
MIN_YEAR = 2025

class CurrencyService:
    def __init__(self):
        self.start_time = datetime.now()
        self.last_successful_send = None
        self.last_rate = None
        self.rate_cache = {}
        self.http_client = httpx.Client(timeout=30.0)

    def __del__(self):
        self.http_client.close()

    @lru_cache(maxsize=365)
    def get_rate(self, date: datetime) -> float | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        try:
            date_key = date.date()
            if date_key in self.rate_cache:
                return self.rate_cache[date_key]
            
            if date_key == datetime.now().date():
                url = DAILY_URL
            else:
                if date.year < MIN_YEAR:
                    return None
                url = ARCHIVE_URL.format(year=date.year, month=date.month, day=date.day)
            
            response = self.http_client.get(url)
            if response.status_code != 200:
                return None

            rate = round(response.json()["Valute"]["USD"]["Value"], 4)
            self.rate_cache[date_key] = rate
            return rate
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
            return None

    def get_previous_workday_rate(self, from_date: datetime) -> float | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–¥ from_date."""
        for days_ago in range(1, 10):  # –º–∞–∫—Å–∏–º—É–º 9 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            candidate = from_date - timedelta(days=days_ago)
            rate = self.get_rate(candidate)
            if rate is not None:
                return rate
        return None

    def calculate_monthly_stats(self, year: int, month: int) -> dict | None:
        """–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç–∞–≤–∫–∏ –º–µ—Å—è—Ü–∞."""
        if year < MIN_YEAR:
            return None
        last_day = calendar.monthrange(year, month)[1]
        rates = []
        for day in range(1, last_day + 1):
            rate = self.get_rate(datetime(year, month, day))
            if rate is not None:
                rates.append(rate)

        if not rates:
            return None

        return {
            "last_rate": rates[-1],
            "avg_rate": round(sum(rates) / len(rates), 4),
            "days_count": len(rates)
        }

    def send_to_chat(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç VK Teams."""
        try:
            response = self.http_client.get(
                "https://api.internal.myteam.mail.ru/bot/v1/messages/sendText",
                params={"token": TOKEN, "chatId": CHAT_ID, "text": text}
            )
            if response.status_code == 200:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def format_change(self, change: float | None) -> str:
        if change is None:
            return "üîÑ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        return f"üìà +{change:.4f}" if change > 0 else f"üìâ {change:.4f}" if change < 0 else "üö´ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"

    def send_daily_report(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        try:
            today = datetime.now()
            rate_today = self.get_rate(today)
            if rate_today is None:
                raise ValueError("–ö—É—Ä—Å —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ–ª—É—á–µ–Ω.")

            prev_rate = self.get_previous_workday_rate(today)
            change = (rate_today - prev_rate) if prev_rate is not None else None

            date_str = today.strftime("%d.%m.%Y")
            message = (
                f"üíµ –ö—É—Ä—Å USD –Ω–∞ {date_str}:\n"
                f"üîπ {rate_today:.4f} ‚ÇΩ\n"
                f"üî∏ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {self.format_change(change)}"
            )
            self.send_to_chat(message)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            if today.day == 1:
                prev_month = today.replace(day=1) - timedelta(days=1)
                stats = self.calculate_monthly_stats(prev_month.year, prev_month.month)

                if stats:
                    avg_message = (
                        f"üìä –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å –∑–∞ {prev_month.strftime('%B %Y')}:\n"
                        f"üîπ {stats['avg_rate']:.4f} ‚ÇΩ\n"
                        f"üî∏ –î–Ω–µ–π –≤ —Ä–∞—Å—á–µ—Ç–µ: {stats['days_count']}\n"
                        f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å: {stats['last_rate']:.4f} ‚ÇΩ"
                    )
                    self.send_to_chat(avg_message)

                    bidease_message = (
                        f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ Bidease –Ω–∞ {today.strftime('%B %Y')}:\n"
                        f"üîπ {round(rate_today * 1.06, 4):.4f} ‚ÇΩ\n"
                        f"üî∏ –ù–∞ –æ—Å–Ω–æ–≤–µ –∫—É—Ä—Å–∞: {rate_today:.4f} ‚ÇΩ √ó 1.06"
                    )
                    self.send_to_chat(bidease_message)

            self.last_successful_send = datetime.now()
            self.last_rate = rate_today
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

currency_service = CurrencyService()

def run_scheduler():
    schedule.every().day.at("11:00").do(currency_service.send_daily_report)  # 08:00 –ú–°–ö
    schedule.every(55).minutes.do(lambda: logger.info("Self-ping"))

    currency_service.send_daily_report()  # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    while True:
        schedule.run_pending()
        time.sleep(60)

@app.route('/')
def home():
    return """
    <h1>–°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–∞ USD</h1>
    <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 08:00 –ú–°–ö.</p>
    <p><a href="/health">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</a></p>
    <p><a href="/ping">Ping</a></p>
    """

@app.route('/health')
def health():
    return jsonify({
        "status": "running",
        "start_time": currency_service.start_time.isoformat(),
        "last_successful_send": currency_service.last_successful_send.isoformat() if currency_service.last_successful_send else None,
        "last_rate": currency_service.last_rate
    })

@app.route('/ping')
def ping():
    logger.info("Ping received")
    return jsonify({"status": "alive", "time": datetime.now().isoformat()})

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
threading.Thread(target=run_scheduler, daemon=True).start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv("PORT", 5000)))
