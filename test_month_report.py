from flask import Flask, jsonify
import threading
import httpx
from datetime import datetime, timedelta
import logging
import os
import time
import schedule
import socket
import calendar
from typing import Optional, Dict

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
BASE_CBR_URL = "https://www.cbr-xml-daily.ru"
DAILY_URL = f"{BASE_CBR_URL}/daily_json.js"
ARCHIVE_URL = f"{BASE_CBR_URL}/archive/{{year}}/{{month:02d}}/{{day:02d}}/daily_json.js"

class CurrencyService:
    def __init__(self):
        self.last_rate: Optional[float] = None
        self.last_successful_send: Optional[datetime] = None
        self.start_time = datetime.now()
        self.test_mode = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

    def get_rate(self, date: datetime) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É"""
        try:
            if date.date() == datetime.now().date() and not self.test_mode:
                response = httpx.get(DAILY_URL, timeout=10)
            else:
                url = ARCHIVE_URL.format(
                    year=date.year,
                    month=date.month,
                    day=date.day
                )
                response = httpx.get(url, timeout=10)
            
            if response.status_code == 200:
                return response.json()["Valute"]["USD"]["Value"]
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –Ω–∞ {date.strftime('%d.%m.%Y')}: {str(e)}")
            return None

    def get_last_available_rate(self, date: datetime) -> Optional[float]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å"""
        rate = self.get_rate(date)
        if rate is not None:
            return rate
        
        prev_date = date - timedelta(days=1)
        if prev_date.year < 2024:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
            return None
            
        return self.get_last_available_rate(prev_date)

    def calculate_monthly_stats(self, year: int, month: int) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
        last_day = calendar.monthrange(year, month)[1]
        rates = []
        current_rate = None
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫—É—Ä—Å—ã –∑–∞ –º–µ—Å—è—Ü —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø—É—Å–∫–æ–≤
        for day in range(1, last_day + 1):
            date = datetime(year, month, day)
            rate = self.get_rate(date)
            
            if rate is not None:
                current_rate = rate
            elif current_rate is None:
                # –î–ª—è –ø–µ—Ä–≤—ã—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ –∏—â–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–µ—Å—è—Ü–∞—Ö
                current_rate = self.get_last_available_rate(date - timedelta(days=1))
                if current_rate is None:
                    continue
            
            rates.append(current_rate)
            logger.info(f"{date.strftime('%d.%m.%Y')}: {current_rate:.2f} ‚ÇΩ")
        
        if not rates:
            return None
            
        last_rate = rates[-1]
        avg_rate = sum(rates) / len(rates)
        
        return {
            "last_rate": last_rate,
            "avg_rate": avg_rate,
            "days_count": len(rates)
        }

    def send_to_chat(self, text: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        try:
            response = httpx.get(
                "https://api.internal.myteam.mail.ru/bot/v1/messages/sendText",
                params={"token": TOKEN, "chatId": CHAT_ID, "text": text},
                timeout=10
            )
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
                return True
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def send_test_reports(self) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã"""
        try:
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –¢–ï–°–¢–û–í–´–• –æ—Ç—á–µ—Ç–æ–≤")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å (—Ä–µ–∞–ª—å–Ω—ã–π)
            response = httpx.get(DAILY_URL, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            usd = data["Valute"]["USD"]["Value"]
            eur = data["Valute"]["EUR"]["Value"]
            current_date = datetime.fromisoformat(data["Date"])
            date_str = current_date.strftime("%d.%m.%Y")

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
            current_msg = f"üìä –¢–ï–ö–£–©–ò–ô –ö–£–†–° ({date_str}):\nUSD: {usd:.2f} ‚ÇΩ\nEUR: {eur:.2f} ‚ÇΩ"
            self.send_to_chat(current_msg)

            # 3. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–∞—Ä—Ç
            self.test_mode = True
            march_stats = self.calculate_monthly_stats(2025, 3)
            self.test_mode = False
            
            if march_stats:
                # –ö—É—Ä—Å Bidease –Ω–∞ –∞–ø—Ä–µ–ª—å
                bidease_msg = (
                    f"üîÆ –¢–ï–°–¢: BIDEASE –ù–ê –ê–ü–†–ï–õ–¨ 2025\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å –º–∞—Ä—Ç–∞: {march_stats['last_rate']:.2f} ‚ÇΩ\n"
                    f"–†–∞—Å—á–µ—Ç–Ω—ã–π –∫—É—Ä—Å: {march_stats['last_rate'] * 1.06:.2f} ‚ÇΩ (+6%)"
                )
                self.send_to_chat(bidease_msg)

                # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å
                avg_msg = (
                    f"üìà –¢–ï–°–¢: –°–†–ï–î–ù–ò–ô –ö–£–†–° –ó–ê –ú–ê–†–¢ 2025\n"
                    f"–°—Ä–µ–¥–Ω–µ–µ: {march_stats['avg_rate']:.2f} ‚ÇΩ\n"
                    f"–î–Ω–µ–π –≤ —Ä–∞—Å—á–µ—Ç–µ: {march_stats['days_count']}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å: {march_stats['last_rate']:.2f} ‚ÇΩ"
                )
                self.send_to_chat(avg_msg)

            self.last_successful_send = datetime.now()
            self.last_rate = usd
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}", exc_info=True)
            self.test_mode = False
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
currency_service = CurrencyService()

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á"""
    # –î–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
    currency_service.send_test_reports()
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    schedule.every().day.at("05:00").do(currency_service.send_test_reports)
    
    while True:
        schedule.run_pending()
        time.sleep(60)

@app.route('/')
def home():
    return """
    <h1>–°–µ—Ä–≤–∏—Å –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (–¢–ï–°–¢)</h1>
    <p>–°–µ—Ä–≤–∏—Å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∑–∞ –º–∞—Ä—Ç 2025.</p>
    <p>–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç.</p>
    <p><a href="/health">–°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã</a></p>
    """

@app.route('/health')
def health_check():
    return jsonify({
        "status": "test_mode" if currency_service.test_mode else "production",
        "start_time": currency_service.start_time.isoformat(),
        "last_successful_send": currency_service.last_successful_send.isoformat() if currency_service.last_successful_send else None,
        "last_rate": currency_service.last_rate,
        "next_run": str(schedule.next_run())
    })

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
threading.Thread(target=run_scheduler, daemon=True).start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
